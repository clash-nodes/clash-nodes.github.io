<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clash-nodes.github.io/news/article-109539.htm" />
    <title>手写useState与useEffect_在线工具</title>
        <meta name="description" content="useState与useEffect是驱动React hooks运行的基础，useState用于管理状态，useEffect用以处理副作用，通过手写简单的useState与useEffect来理解其运" />
        <meta charset="utf-8">
    <link rel="icon" href="/assets/website/img/clash_nodes/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashNodes分享订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clash-nodes.github.io/news/article-109539.htm" />
    <meta property="og:site_name" content="ClashNodes分享订阅站" />
    <meta property="og:title" content="手写useState与useEffect_在线工具" />
    <meta property="og:image" content="https://clash-nodes.github.io/uploads/20240414/745597d56858f857764d987106e70771.webp" />
        <meta property="og:release_date" content="2025-05-02T09:22:35" />
    <meta property="og:updated_time" content="2025-05-02T09:22:35" />
        <meta property="og:description" content="useState与useEffect是驱动React hooks运行的基础，useState用于管理状态，useEffect用以处理副作用，通过手写简单的useState与useEffect来理解其运" />
        
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="手写useState与useEffect_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XW6LB7RVY3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XW6LB7RVY3');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nodes/bootstrap-4.1.2/bootstrap.min.css">
    <link href="/assets/website/js/frontend/clash_nodes/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="/assets/website/js/frontend/clash_nodes/plugins/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/js/frontend/clash_nodes/plugins/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/js/frontend/clash_nodes/plugins/animate.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nodes/about.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nodes/about_responsive.css">
</head>

<body data-page="detail">
    <div class="super_container">
                <!-- Header -->
        <header class="header">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="header_content d-flex flex-row align-items-center justify-content-start">
                            <div class="logo">Clash<span>Nodes</span></div>
                            <nav class="main_nav">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                    </ul>
                            </nav>
                            <div class="social header_social">
                                <ul class="d-flex flex-row align-items-center justify-content-start">
                                    <li><a href="#"><i class="fa fa-pinterest" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-facebook" aria-hidden="true"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter" aria-hidden="true"></i></a></li>
                                </ul>
                            </div>
                            <div class="hamburger ml-auto"><i class="fa fa-bars" aria-hidden="true"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <!-- Menu -->
        <div class="menu">
            <div class="menu_content d-flex flex-column align-items-center justify-content-center">
                <ul class="menu_nav_list text-center">
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="index.html">Home</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
        <!-- Home -->
        <div class="home">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-href="/assets/website/img/clash_nodes/about.jpg" data-speed="0.8"></div>
            <div class="home_container">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <div class="home_content">
                                <div class="home_title">手写useState与useEffect_在线工具</div>
                                <div class="breadcrumbs">
                                    <ul class="d-flex flex-row align-items-center justify-content-start">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li>正文</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Classes -->
        <div class="classes">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="row row-eq-height">
                            <div class="col-md-12">
                                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				</h1> <p><code>useState</code>与<code>useEffect</code>是驱动<code>React hooks</code>运行的基础，<code>useState</code>用于管理状态，<code>useEffect</code>用以处理副作用，通过手写简单的<code>useState</code>与<code>useEffect</code>来理解其运行原理。</p> <h2 id="usestate">useState</h2> <p>一个简单的<code>useState</code>的使用如下。</p> <pre><code>// App.tsx import { useState } from "react"; import "./styles.css";  export default function App() {   const [count, setCount] = useState(0);    console.log("refresh");   const addCount = () =&gt; setCount(count + 1);    return (     &lt;&gt;       &lt;div&gt;{count}&lt;/div&gt;       &lt;button onClick={addCount}&gt;Count++&lt;/button&gt;     &lt;/&gt;   ); } </code></pre> <p>当页面在首次渲染时会<code>render</code>渲染<code>&lt;App /&gt;</code>函数组件，其实际上是调用<code>App()</code>方法，得到虚拟<code>DOM</code>元素，并将其渲染到浏览器页面上，当用户点击<code>button</code>按钮时会调用<code>addCount</code>方法，然后再进行一次<code>render</code>渲染<code>&lt;App /&gt;</code>函数组件，其实际上还是调用了<code>App()</code>方法，得到一个新的虚拟<code>DOM</code>元素，然后<code>React</code>会执行<code>DOM diff</code>算法，将改变的部分更新到浏览器的页面上。也就是说，实际上每次<code>setCount</code>都会重新执行这个<code>App()</code>函数，这个可以通过<code>console.log("refresh")</code>那一行看到效果，每次点击按钮控制台都会打印<code>refresh</code>。<br /> 那么问题来了，页面首次渲染和进行<code>+1</code>操作，都会调用<code>App()</code>函数去执行<code>const [count, setCount] = useState(0);</code>这行代码，那它是怎么做到在<code>+ +</code>操作后，第二次渲染时执行同样的代码，却不对变量<code>n</code>进行初始化也就是一直为<code>0</code>，而是拿到<code>n</code>的最新值。<br /> 考虑到上边这个问题，我们可以简单实现一个<code>useMyState</code>函数，上边在<code>Hooks</code>为什么称为<code>Hooks</code>这个问题上提到了可以勾过来一个函数作用域的问题，那么我们也完全可以实现一个<code>Hooks</code>去勾过来一个作用域，简单来说就是在<code>useMyState</code>里边保存一个变量，也就是一个闭包里边保存了这个变量，然后这个变量保存了上次的值，再次调用的时候直接取出这个之前保存的值即可，<code>https://codesandbox.io/s/fancy-dust-kbd1i?file=/src/use-my-state-version-1.ts</code>。</p> <pre><code>// index.tsx import { render } from "react-dom"; import App from "./App";  // 改造一下让其导出 让我们能够强行刷新`&lt;App /&gt;` export const forceRefresh = () =&gt; {   console.log("Force fresh &lt;App /&gt;");   const rootElement = document.getElementById("root");   render(&lt;App /&gt;, rootElement); };  forceRefresh(); </code></pre> <pre><code>// use-my-state-version-1.ts import { forceRefresh } from "./index";  let saveState: any = null;  export function useMyState&lt;T&gt;(state: T): [T, (newState: T) =&gt; void] {   saveState = saveState || state;   const rtnState: T = saveState;   const setState = (newState: T): void =&gt; {     saveState = newState;     forceRefresh();   };   return [rtnState, setState]; } </code></pre> <pre><code>// App.tsx import { useMyState } from "./use-my-state-version-1"; import "./styles.css";  export default function App() {   const [count, setCount] = useMyState(0);    console.log("refresh");   const addCount = () =&gt; setCount(count + 1);    return (     &lt;&gt;       &lt;div&gt;{count}&lt;/div&gt;       &lt;button onClick={addCount}&gt;Count++&lt;/button&gt;     &lt;/&gt;   ); } </code></pre> <p>可以在<code>code sandbox</code>中看到现在已经可以实现点击按钮进行<code>++</code>操作了，而不是无论怎么点击都是<code>0</code>，但是上边的情况太过于简单，因为只有一个<code>state</code>，如果使用多个变量，那就需要调用两次<code>useState</code>，我们就需要对其进行一下改进了，不然会造成多个变量存在一个<code>saveState</code>中，这样会产生冲突覆盖的问题，改进思路有两种:<code>1</code>把做成一个对象，比如<code>saveState = { n:0, m:0 }</code>，这种方式不太符合需求，因为在使用<code>useState</code>的时候只会传递一个初始值参数，不会传递名称; <code>2</code>把<code>saveState</code>做成一个数组，比如<code>saveState:[0, 0]</code>。实际上<code>React</code>中是通过类似单链表的形式来代替数组的，通过<code>next</code>按顺序串联所有的<code>hook</code>，使用数组也是一种类似的操作，因为两者都依赖于定义<code>Hooks</code>的顺序，<code>https://codesandbox.io/s/fancy-dust-kbd1i?file=/src/use-my-state-version-2.ts</code>。</p> <pre><code>// index.tsx import { render } from "react-dom"; import App from "./App";  // 改造一下让其导出 让我们能够强行刷新`&lt;App /&gt;` export const forceRefresh = () =&gt; {   console.log("Force fresh &lt;App /&gt;");   const rootElement = document.getElementById("root");   render(&lt;App /&gt;, rootElement); };  forceRefresh(); </code></pre> <pre><code>// use-my-state-version-2.ts import { forceRefresh } from "./index";  let saveState: any[] = []; let index: number = 0;  export function useMyState&lt;T&gt;(state: T): [T, (newState: T) =&gt; void] {   const curIndex = index;   index++;   saveState[curIndex] = saveState[curIndex] || state;   const rtnState: T = saveState[curIndex];   const setState = (newState: T): void =&gt; {     saveState[curIndex] = newState;     index = 0; // 必须在渲染前后将`index`值重置为`0` 不然就无法借助调用顺序确定`Hooks`了     forceRefresh();   };   return [rtnState, setState]; } </code></pre> <pre><code>// App.tsx import { useMyState } from "./use-my-state-version-2"; import "./styles.css";  export default function App() {   const [count1, setCount1] = useMyState(0);   const [count2, setCount2] = useMyState(0);    console.log("refresh");   const addCount1 = () =&gt; setCount1(count1 + 1);   const addCount2 = () =&gt; setCount2(count2 + 1);    return (     &lt;&gt;       &lt;div&gt;{count1}&lt;/div&gt;       &lt;button onClick={addCount1}&gt;Count1++&lt;/button&gt;       &lt;div&gt;{count2}&lt;/div&gt;       &lt;button onClick={addCount2}&gt;Count2++&lt;/button&gt;     &lt;/&gt;   ); } </code></pre> <p>可以看到已经可以实现在多个<code>State</code>下的独立的状态更新了，那么问题又又来了，<code>&lt;App /&gt;</code>用了<code>saveState</code>和<code>index</code>，那其他组件用什么，也就是说多个组件如果解决每个组件独立的作用域，解决办法<code>1</code>每个组件都创建一个<code>saveState</code>和<code>index</code>，但是几个组件在一个文件中又会导致<code>saveState</code>、<code>index</code>冲突。解决办法<code>2</code>放在组件对应的虚拟节点对象上，<code>React</code>采用的也是这种方案，将<code>saveState</code>和<code>index</code>变量放在组件对应的虚拟节点对象<code>FiberNode</code>上，在<code>React</code>中具体实现<code>saveState</code>叫做<code>memoizedState</code>，实际上<code>React</code>中是通过类似单链表的形式来代替数组的，通过<code>next</code>按顺序串联所有的<code>hook</code>。<br /> 可以看出<code>useState</code>是强依赖于定义的顺序的，<code>useState</code>数组中保存的顺序非常重要在执行函数组件的时候可以通过下标的自增获取对应的<code>state</code>值，由于是通过顺序获取的，这将会强制要求你不允许更改<code>useState</code>的顺序，例如使用条件判断是否执行<code>useState</code>这样会导致按顺序获取到的值与预期的值不同，这个问题也出现在了<code>React.useState</code>自己身上，因此<code>React</code>是不允许你使用条件判断去控制函数组件中的<code>useState</code>的顺序的，这会导致获取到的值混乱，类似于下边的代码则会抛出异常。</p> <pre><code>const App = () =&gt; {     let state;     if(true){         [state, setState] = React.useState(0);     }     return (         &lt;div&gt;{state}&lt;/div&gt;     ) }  &lt;!-- React Hook "React.useState" is called conditionally. React Hooks must be called in the exact same order in every component render  react-hooks/rules-of-hooks--&gt; </code></pre> <p>这里当然只是对于<code>useState</code>的简单实现，对于<code>React</code>真正的实现可以参考<code>packages/react-reconciler/src/ReactFiberHooks.js</code>，当前的<code>React</code>版本是<code>16.10.2</code>，也可以简略看一下相关的<code>type</code>。</p> <pre><code class="language-ts">type Hooks = {   memoizedState: any, // 指向当前渲染节点`Fiber` 上一次完整更新之后的最终状态值   baseState: any, // 初始化`initialState` 已经每次`dispatch`之后`newState`   baseUpdate: Update&lt;any&gt; | null, // 当前需要更新的`Update` 每次更新完之后会赋值上一个`update` 方便`react`在渲染错误的边缘数据回溯   queue: UpdateQueue&lt;any&gt; | null, // 缓存的更新队列 存储多次更新行为   next: Hook | null, // `link`到下一个`hooks` 通过`next`串联所有`hooks` } </code></pre> <h2 id="useeffect">useEffect</h2> <p>一个简单的<code>useEffect</code>的使用如下。</p> <pre><code>import { useEffect, useState } from "react"; import "./styles.css";  export default function App() {   const [count1, setCount1] = useState(0);   const [count2, setCount2] = useState(0);    console.log("refresh");   const addCount1 = () =&gt; setCount1(count1 + 1);   const addCount2 = () =&gt; setCount2(count2 + 1);    useEffect(() =&gt; {     console.log("count1 -&gt; effect", count1);   }, [count1]);    return (     &lt;&gt;       &lt;div&gt;{count1}&lt;/div&gt;       &lt;button onClick={addCount1}&gt;Count1++&lt;/button&gt;       &lt;div&gt;{count2}&lt;/div&gt;       &lt;button onClick={addCount2}&gt;Count2++&lt;/button&gt;     &lt;/&gt;   ); } </code></pre> <p>同样，每次<code>addCount1</code>都会重新执行这个<code>App()</code>函数，每次点击按钮控制台都会打印<code>refresh</code>，在这里还通过<code>count1</code>变动的副作用来打印了<code>count1 -&gt; effect ${count1}</code>，而点击<code>addCount2</code>却不会处罚副作用的打印，原因明显是我们只指定了<code>count1</code>的副作用，由此可见可以通过<code>useEffect</code>来实现更细粒度的副作用处理。<br /> 在这里我们依旧延续上边<code>useState</code>的实现思路，将之前的数据存储起来，之后当函数执行的时候我们对比这其中的数据是否发生了变动，如果发生了变动，那么我们便执行该函数，当然我们还需要完成副作用清除的功能，<code>https://codesandbox.io/s/react-usestate-8v0li9?file=/src/use-my-effect.ts</code>。</p> <pre><code>// use-my-effect.ts const dependencyList: unknown[][] = []; const clearCallbacks: (void | (() =&gt; void))[] = []; let index: number = 0;  export function useMyEffect(   callback: () =&gt; void | (() =&gt; void),   deps: unknown[] ): void {   const curIndex = index;   index++;   const lastDeps = dependencyList[curIndex];   const changed =     !lastDeps || !deps || deps.some((dep, i) =&gt; dep !== lastDeps[i]);   if (changed) {     dependencyList[curIndex] = deps;     const clearCallback = clearCallbacks[curIndex];     if (clearCallback) clearCallback();     clearCallbacks[curIndex] = callback();   } }  export function clearEffectIndex() {   index = 0; } </code></pre> <pre><code>// App.tsx import { useState } from "react"; import { useMyEffect, clearEffectIndex } from "./use-my-effect"; import "./styles.css";  export default function App() {   const [count1, setCount1] = useState(0);   const [count2, setCount2] = useState(0);    console.log("refresh");   const addCount1 = () =&gt; setCount1(count1 + 1);   const addCount2 = () =&gt; setCount2(count2 + 1);    useMyEffect(() =&gt; {     console.log("count1 -&gt; effect", count1);     console.log("setTimeout", count1);     return () =&gt; console.log("clear setTimeout", count1);   }, [count1]);    useMyEffect(() =&gt; {     console.log("count2 -&gt; effect", count2);   }, [count2]);    clearEffectIndex();    return (     &lt;&gt;       &lt;div&gt;{count1}&lt;/div&gt;       &lt;button onClick={addCount1}&gt;Count1++&lt;/button&gt;       &lt;div&gt;{count2}&lt;/div&gt;       &lt;button onClick={addCount2}&gt;Count2++&lt;/button&gt;     &lt;/&gt;   ); } </code></pre> <p>通过上边的实现，我们也可以通过将依赖与副作用清除函数存起来的方式，来实现<code>useEffect</code>，通过对比上一次传递的依赖值与当前传递的依赖值是否相同，来决定是否执行传递过来的函数，在这里由于我们无法得知这个<code>React.Fc</code>组件函数是在什么时候完成最后一个<code>Effect</code>，我们就需要手动来赋值这个标记的<code>index</code>为<code>0</code>。当然在<code>React</code>之中同样也是将<code>useEffect</code>挂载到了<code>Fiber</code>上来实现的，并且将所需要的依赖值存储在当前的<code>Fiber</code>的<code>memorizedState</code>中，通过实现的链表以及判断初次加载来实现了通过<code>next</code>按顺序串联所有的<code>hooks</code>，这样也就能知道究竟哪个是最后一个<code>Hooks</code>了，另外<code>useEffect</code>同样也是强依赖于定义的顺序的，能够让<code>React</code>对齐多次执行组件函数时的依赖。</p> <h2 id="自定义hooks">自定义Hooks</h2> <p>我在初学<code>Hooks</code>的时候一直有一个疑问，对于<code>React Hooks</code>的使用与普通的函数调用区别究竟在哪里，当时我还对知乎的某个问题强答了一番。</p> <p>以我学了几天<code>React</code>的理解，自定义<code>Hooks</code>跟普通函数区别在于:</p> <ul> <li> <code>Hooks</code>只应该在<code>React</code>函数组件内调用，而不应该在普通函数调用。</li> <li> <code>Hooks</code>能够调用诸如<code>useState</code>、<code>useEffect</code>、<code>useContext</code>等，普通函数则不能。</li> </ul> <p>由此觉得<code>Hooks</code>就像<code>mixin</code>，是在组件之间共享有状态和副作用的方式，所以应该是应该在函数组件中用到的与组件生命周期等相关的函数才能称为<code>Hooks</code>，而不仅仅是普通的<code>utils</code>函数。<br /> 对于第一个问题，如果将其声明为<code>Hooks</code>但是并没有起到作为Hooks的功能，那么私认为不能称为<code>Hooks</code>，为避免混淆，还是建议在调用其他<code>Hooks</code>的时候再使用<code>use</code>标识。当然，诸如自己实现一个<code>useState</code>功能这种虽然并没有调用其他的<code>Hooks</code>，但是他与函数组件的功能强相关，肯定是属于<code>Hooks</code>的。<br /> 对于第二个问题的话，其实必须使用<code>use</code>开头并不是一个语法或者一个强制性的方案， 以<code>use</code>开头其实更像是一个约定，就像是<code>GET</code>请求约定语义不携带<code>Body</code>一样， 其主要目的还是为了约束语法，如果你自己实现一个类似<code>useState</code>简单功能的话，就会了解到为什么不能够出现类似于<code>if (xxx) const [a, setA] = useState(0);</code>这样的代码了，<code>React</code>文档中明确说明了使用<code>Hooks</code>的规则，使用<code>use</code>开头的目的就是让<code>React</code>识别出来这是个<code>Hooks</code>，从而检查这些规则约束，通常也会使用<code>ESlint</code>配合<code>eslint-plugin-react-hooks</code>检查这些规则。</p> <p>后来对于这个问题有了新的理解，如果定义一个真正的自定义<code>Hooks</code>的话，那么通常都会需要使用<code>useState</code>、<code>useEffect</code>等<code>Hooks</code>，就相当于自定义<code>Hooks</code>是由官方的<code>Hooks</code>组合而成的，而通过官方的这些<code>Hooks</code>来组合的话，就可以实现将数据挂载到节点上，也就是上边的实现提到的实际<code>memorizedState</code>都是在<code>Fiber</code>中的，而自行实现的函数例如上边的<code>Hooks</code>实现，是无法做到这一点的。也就是说我们通过自定义<code>Hooks</code>是通过来组合官方<code>Hooks</code>以及自己的逻辑来实现的对于节点内的一些状态或者其他方面的逻辑封装，而使用普通函数且采用类似于<code>Hooks</code>的语法的话则只能实现在全局的状态和逻辑的封装，简单来说就是提供了接口来让我们可以在节点上做逻辑的封装。<br /> 有一个简单的例子，例如我们要封装一个<code>useUpdateEffect</code>来避免在函数组件在第一次挂载的时候就执行<code>effect</code>，在这里我们就应该采用<code>useRef</code>或者是<code>useState</code>而不是仅仅定义一个变量来存储状态值，<code>https://codesandbox.io/s/flamboyant-tu-21po2l?file=/src/App.tsx</code>。</p> <pre><code>// use-update-effect-ref.ts import { DependencyList, EffectCallback, useEffect, useRef } from "react";  export const useUpdateEffect = (   effect: EffectCallback,   deps?: DependencyList ) =&gt; {   const isMounted = useRef(false);    useEffect(() =&gt; {     if (!isMounted.current) {       isMounted.current = true;     } else {       return effect();     }   }, deps); }; </code></pre> <pre><code>// use-update-effect-var.ts import { DependencyList, EffectCallback, useEffect } from "react";  let isMounted = false; export const useUpdateEffect = (   effect: EffectCallback,   deps?: DependencyList ) =&gt; {   useEffect(() =&gt; {     if (!isMounted) {       isMounted = true;     } else {       return effect();     }   }, deps); }; </code></pre> <pre><code>// App.tsx import { useState, useEffect } from "react"; import { useUpdateEffect } from "./use-update-effect-ref"; // import { useUpdateEffect } from "./use-update-effect-var"; import "./styles.css";  export default function App() {   const [count1, setCount1] = useState(0);   const [count2, setCount2] = useState(0);    const addCount1 = () =&gt; setCount1(count1 + 1);   const addCount2 = () =&gt; setCount2(count2 + 1);    useUpdateEffect(() =&gt; {     console.log("count1 -&gt; effect", count1);   }, [count1]);    useUpdateEffect(() =&gt; {     console.log("count2 -&gt; effect", count2);   }, [count2]);    return (     &lt;&gt;       &lt;div&gt;{count1}&lt;/div&gt;       &lt;button onClick={addCount1}&gt;Count1++&lt;/button&gt;       &lt;div&gt;{count2}&lt;/div&gt;       &lt;button onClick={addCount2}&gt;Count2++&lt;/button&gt;     &lt;/&gt;   ); } </code></pre> <p>当我们切换<code>use-update-effect-ref</code>与<code>use-update-effect-var</code>的<code>useUpdateEffect</code>时，我们会发现当刷新页面时使用<code>use-update-effect-ref</code>将不会有值打印，而<code>use-update-effect-var</code>则会打印<code>count2 -&gt; effect 0</code>，而在点击<code>Count1++</code>或者<code>Count2++</code>的效果都是正常的，说明<code>use-update-effect-ref</code>是能够我们想要的<code>useUpdateEffect</code>功能，而<code>use-update-effect-var</code>却因为变量值共享的问题而无法正确实现功能，当然我们也可以通过类似于数组的方式来解决这个问题，但是再具体到各个组件之间的共享上面，我们就无法在在类似于<code>Hooks</code>语法的基础上来实现了，必须手动注册一个闭包来完成类似的功能，而且类似于<code>useState</code>在<code>set</code>时刷新本组件以及子组件的方式，就必须借助<code>useState</code>来实现了。</p> <h2 id="每日一题">每日一题</h2> <pre><code>https://github.com/WindrunnerMax/EveryDay </code></pre> <h2 id="参考">参考</h2> <pre><code>https://zhuanlan.zhihu.com/p/265662126 https://juejin.cn/post/6927698033798807560 https://segmentfault.com/a/1190000037608813 https://github.com/brickspert/blog/issues/26 https://codesandbox.io/s/flamboyant-tu-21po2l https://codesandbox.io/s/react-usestate-kbd1i https://codesandbox.io/s/react-usestate-8v0li9 https://stackoverflow.com/questions/60133412/react-custom-hooks-vs-normal-functions-what-is-the-difference </code></pre> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-108714.htm">Vue 实现骨架屏（skeleton）</a></p>
                                        <p>下一个：<a href="/news/article-109540.htm">幼猫驱虫多少钱一次（2个月的幼猫要驱虫吗）</a></p>
                                    </div>
                                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-96271.htm" title="动物防疫站可以给狗狗打疫苗吗（动物防疫站可以给狗狗打疫苗吗多少钱）">动物防疫站可以给狗狗打疫苗吗（动物防疫站可以给狗狗打疫苗吗多少钱）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-27-clash-windows.htm" title="4月27日|V2ray/Shadowrocket/Clash/SSR每天更新22.3M/S免费节点订阅链接，Clash便宜机场订阅">4月27日|V2ray/Shadowrocket/Clash/SSR每天更新22.3M/S免费节点订阅链接，Clash便宜机场订阅</a></li>
                        <li class="py-2"><a href="/news/article-100718.htm" title="C语言[关于零表示假，非零表示真]">C语言[关于零表示假，非零表示真]</a></li>
                        <li class="py-2"><a href="/news/article-86641.htm" title="南京宠物狗领养中心地址查询电话（南京有没有宠物领养中心）">南京宠物狗领养中心地址查询电话（南京有没有宠物领养中心）</a></li>
                        <li class="py-2"><a href="/news/article-87366.htm" title="可以自己给宠物打疫苗吗（可以自己给宠物***吗）">可以自己给宠物打疫苗吗（可以自己给宠物***吗）</a></li>
                        <li class="py-2"><a href="/news/article-106145.htm" title="宠物免费领养是什么意思呀英文（免费领养宠物包邮）">宠物免费领养是什么意思呀英文（免费领养宠物包邮）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-9-shadowrocket-node.htm" title="4月9日|Shadowrocket/Clash/SSR/V2ray每天更新21.3M/S免费节点订阅链接，Clash便宜机场订阅">4月9日|Shadowrocket/Clash/SSR/V2ray每天更新21.3M/S免费节点订阅链接，Clash便宜机场订阅</a></li>
                        <li class="py-2"><a href="/news/article-106146.htm" title="宠物领养协议书范本（宠物领养协议书怎么写）">宠物领养协议书范本（宠物领养协议书怎么写）</a></li>
                        <li class="py-2"><a href="/news/article-101351.htm" title="小孩被猫抓伤了多久过安全期（小孩被猫抓伤多久会发病）">小孩被猫抓伤了多久过安全期（小孩被猫抓伤多久会发病）</a></li>
                        <li class="py-2"><a href="/news/article-104580.htm" title="宠物粮多少钱一斤啊（宠物粮成本价）">宠物粮多少钱一斤啊（宠物粮成本价）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">13</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">86</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <!-- Footer -->
        <footer class="footer">
            <div class="parallax_background parallax-window" data-parallax="scroll" data-image-href="/assets/website/img/clash_nodes/footer.jpg" data-speed="0.8"></div>
            <div class="footer_overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="footer_content text-center d-flex flex-column align-items-center justify-content-center">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                ClashNodes分享订阅站 版权所有
                                <br />
                                Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>
    <script src="/assets/website/js/frontend/clash_nodes/jquery-3.2.1.min.js"></script>
    <script src="/assets/website/css/clash_nodes/bootstrap-4.1.2/popper.js"></script>
    <script src="/assets/website/css/clash_nodes/bootstrap-4.1.2/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/clash_nodes/plugins/owl.carousel.js"></script>
    <script src="/assets/website/js/frontend/clash_nodes/plugins/easing/easing.js"></script>
    <script src="/assets/website/js/frontend/clash_nodes/plugins/parallax-js-master/parallax.min.js"></script>
    <script src="/assets/website/js/frontend/clash_nodes/about.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>